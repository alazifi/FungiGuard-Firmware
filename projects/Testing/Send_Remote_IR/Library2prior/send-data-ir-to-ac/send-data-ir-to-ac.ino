const int pin1 = 5;
const int pin2 = 18;
const int pin3 = 19;
const int pin4 = 21;

#include <IRremote.h>

IRsend irsend;

void setup() {
    pinMode(LED_BUILTIN, OUTPUT);
    Serial.begin(115200);
  pinMode(pin1,INPUT_PULLUP); // button 1
  pinMode(pin2,INPUT_PULLUP); // button 2
  pinMode(pin3,INPUT_PULLUP); // button 3
  pinMode(pin4,INPUT_PULLUP); // button 4
  
  digitalWrite(pin1, HIGH); // button 1
  digitalWrite(pin2, HIGH); // button 1
  digitalWrite(pin3, HIGH); // button 1
  digitalWrite(pin4, HIGH); // button 1

}

void loop() {
  Serial.println(IR_SEND_PIN);
    Serial.println(LED_BUILTIN);
    delay(1000);
    int khz = 38;

    if(digitalRead(pin1) == LOW){
    unsigned int irSignalP1[] PROGMEM = {8400,4250, 550,550, 500,1650, 500,1650, 500,550, 550,1650, 450,600, 500,1650, 500,550, 550,550, 500,550, 500,1700, 450,1700, 450,600, 500,1650, 500,1650, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,1650, 500,550, 500,600, 500,550, 500,1700, 500,550, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 550,550, 500,550, 550,550, 500,550, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,550, 500,550, 550,550, 500,550, 550,550, 500,550, 550,550, 500,550, 550,550, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 450,650, 450,600, 450,650, 450,600, 500,600, 450,600, 500,600, 500,550, 500,550, 550,550, 500,550, 550,550, 500,550, 550,550, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,1650, 500,550, 500,600, 500,550, 500,600, 500,1650, 500,550, 500,600, 500}; // AnalysIR Batch Export (IRremote) - RAW
    irsend.sendRaw_P(irSignalP1, sizeof(irSignalP1) / sizeof(irSignalP1[0]), khz); // Note the approach used to automatically calculate the size of the array.
    delay(100);
    }
    
    if(digitalRead(pin2) == LOW){
    unsigned int irSignalP2[] PROGMEM = {8400,4250, 550,550, 500,1700, 450,1700, 450,600, 500,1650, 500,550, 500,1700, 450,600, 500,550, 500,1700, 450,1700, 450,1700, 450,600, 500,1650, 500,1650, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 550,550, 500,550, 550,550, 500,550, 550,550, 500,1650, 500,550, 500,600, 500,550, 500,1700, 450,600, 500,600, 450,600, 500,600, 450,600, 500,600, 450,650, 450,600, 500,600, 450,600, 500,600, 500,550, 500,600, 500,550, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,500, 600,500, 550,500, 550,550, 550,500, 550,550, 550,500, 550,1600, 550,550, 500,550, 550,550, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 550,550, 500,550, 550,550, 500,550, 500,600, 500,550, 550,550, 500,550, 550,550, 500,550, 550,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,550, 500,600, 500,600, 450,600, 500,600, 450,600, 500,600, 450,600, 500,600, 450,600, 500,600, 450,600, 450,1700, 500,1650, 500,600, 450,1700, 450,600, 500,1650, 500,600, 450,600, 500}; // AnalysIR Batch Export (IRremote) - RAW
    irsend.sendRaw_P(irSignalP2, sizeof(irSignalP2) / sizeof(irSignalP2[0]), khz); // Note the approach used to automatically calculate the size of the array.
    delay(100);
    }
    
    if(digitalRead(pin3) == LOW){
    unsigned int irSignalP3[] PROGMEM = {8500,4200, 550,500, 600,1600, 550,1600, 550,500, 550,1600, 550,500, 600,1600, 550,500, 550,1600, 550,500, 600,1600, 550,1600, 550,500, 550,1600, 550,1600, 550,500, 600,500, 550,500, 600,500, 550,500, 600,500, 550,500, 600,500, 550,500, 600,500, 600,450, 600,500, 550,500, 600,500, 600,450, 600,500, 600,500, 550,500, 600,1600, 550,500, 550,500, 600,500, 550,1600, 550,500, 550,550, 550,500, 600,500, 550,500, 550,550, 550,500, 600,500, 550,500, 600,500, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 600,500, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,550, 500,550, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,500, 600,500, 550,500, 600,500, 550,500, 600,500, 550,500, 550,550, 550,500, 550,550, 550,550, 500,550, 550,550, 500,550, 550,550, 500,550, 550,550, 500,1650, 500,550, 550,550, 500,550, 550,1600, 500,600, 500,550, 550}; // AnalysIR Batch Export (IRremote) - RAW
    irsend.sendRaw_P(irSignalP3, sizeof(irSignalP3) / sizeof(irSignalP3[0]), khz); // Note the approach used to automatically calculate the size of the array.
    delay(100);
    }
    
    if(digitalRead(pin4) == LOW){
    unsigned int irSignalP4[] PROGMEM = {8450,4200, 600,500, 550,1600, 550,1600, 550,500, 600,1600, 550,500, 550,1600, 550,500, 600,1600, 550,500, 550,1600, 550,1600, 550,500, 600,1600, 550,1600, 550,500, 550,500, 600,500, 550,500, 600,500, 550,500, 600,500, 550,500, 600,500, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 600,1600, 550,500, 550,500, 600,500, 550,1600, 550,500, 600,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,1650, 500,1650, 500,550, 550,500, 600,500, 550,500, 550,550, 550,550, 500,550, 550,550, 500,550, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,500, 600,500, 550,500, 600,500, 550,500, 600,500, 550,500, 600,500, 550,500, 600,500, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,500, 550,550, 550,550, 500,550, 550,500, 550,550, 550,550, 500,550, 500,1650, 500,1700, 450,1700, 450,600, 500,1650, 500,600, 450,600, 500}; // AnalysIR Batch Export (IRremote) - RAW
    irsend.sendRaw_P(irSignalP4, sizeof(irSignalP4) / sizeof(irSignalP4[0]), khz); // Note the approach used to automatically calculate the size of the array.
    delay(100);
    }
}
